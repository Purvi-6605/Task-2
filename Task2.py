# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/190qQhmoZu1Ksv0iQhyukykwcgYLx22xQ
"""

# Exploratory Data Analysis (EDA) - All in One Script

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Load dataset
df = pd.read_csv("Titanic-Dataset.csv")  # 🔁 Replace with your actual file path

# 1. Basic Info
print("\n📄 First 5 rows:\n", df.head())
print("\n🔍 Info:\n")
print(df.info())
print("\n📊 Summary Statistics:\n", df.describe(include='all'))
print("\n❓ Missing Values:\n", df.isnull().sum())
print("\n📐 Data Types:\n", df.dtypes)

# 2. Numerical Summary
print("\n📈 Mean:\n", df.mean(numeric_only=True))
print("\n📉 Median:\n", df.median(numeric_only=True))
print("\n📏 Standard Deviation:\n", df.std(numeric_only=True))

# 3. Histograms for all numeric columns
df.hist(figsize=(12, 10), bins=20, edgecolor='black')
plt.suptitle("Histograms of Numeric Features", fontsize=16)
plt.tight_layout()
plt.show()

# 4. Boxplots for numeric columns
numeric_cols = df.select_dtypes(include='number').columns
for col in numeric_cols:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x=df[col], color='skyblue')
    plt.title(f"Boxplot of {col}")
    plt.grid(True)
    plt.show()

# 5. Correlation Matrix
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Correlation Matrix", fontsize=14)
plt.show()

# 6. Pairplot (for smaller datasets)
if len(numeric_cols) <= 5:  # To avoid clutter
    sns.pairplot(df[numeric_cols])
    plt.suptitle("Pairplot of Numeric Features", y=1.02)
    plt.show()

# 7. Interactive Visualizations with Plotly
# Interactive histogram (first numeric column)
fig = px.histogram(df, x=numeric_cols[0], title=f"Histogram of {numeric_cols[0]}")
fig.show()

# Interactive scatter plot (only if at least 2 numeric columns)
if len(numeric_cols) >= 2:
    fig = px.scatter(df, x=numeric_cols[0], y=numeric_cols[1], color=df.columns[-1] if df.columns[-1] not in numeric_cols else None,
                     title=f"Scatter plot: {numeric_cols[0]} vs {numeric_cols[1]}")
    fig.show()